syntax = "proto3";
package witlab.sf05.v1;
option java_multiple_files = true;
option java_outer_classname = "Json2GrpcProto";
// The package where the generated classes will reside
option java_package = "witlab.sf05.v1";

// The google well-known types
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";

// To do gRPC-json transcoding
import "google/api/annotations.proto";

// Service to demo how to define json to grpc mapping
service JsonToGrpc {

    // 1. This enables an HTTP REST to gRPC mapping as below:
    //
    // HTTP | gRPC
    // -----|-----
    // `GET /v1/messages/123456`  | `GetMessage(name: "messages/123456")`
    rpc GetMessage(GetMessageRequest) returns (GetMessageResponse) {
        option (google.api.http) = {
            get: "/v1/{name=messages/*}"
        };
    }

    // 2. This enables a HTTP JSON to RPC mapping as below:
    //
    // Any fields in the request message which are not bound by the path template
    // automatically become HTTP query parameters if there is no HTTP request body.
    //
    // HTTP | gRPC
    // -----|-----
    // `GET /v1/messages2/123456?revision=2&sub.subfield=foo`
    // | `GetMessage2(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))`
    rpc GetMessage2(GetMessage2Request) returns (GetMessage2Response) {
        option (google.api.http) = {
             get:"/v1/messages2/{message_id}"
         };
    }

    // 3. This enables the following two alternative HTTP JSON to RPC mappings:
    //
    // HTTP | gRPC
    // -----|-----
    // `GET /v1/messages3/123456?user_id=me` | `GetMessage3(user_id: "me" message_id:"123456")`
    // `GET /v1/users/me/messages/123456`   | `GetMessage3(user_id: "me" message_id:"123456")`
    rpc GetMessage3(GetMessage3Request) returns (GetMessage3Response) {
        option (google.api.http) = {
            get: "/v1/messages3/{message_id}"
            additional_bindings {
                get: "/v1/users/{user_id}/messages/{message_id}"
            }
        };
    }

    // 4. The following HTTP JSON to RPC mapping is enabled, where the
    // representation of the JSON in the request body is determined by
    // protos JSON encoding:
    //
    // HTTP | gRPC
    // -----|-----
    // `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })`
    rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse) {
        option (google.api.http) = {
            patch: "/v1/messages/{message_id}"
            body: "message"
         };
    }

    // 5. The special name `*` can be used in the body mapping to define that
    // every field not bound by the path template should be mapped to the
    // request body.
    //
    // The following HTTP JSON to RPC mapping is enabled:
    //
    // HTTP | gRPC
    // -----|-----
    // `PATCH /v1/messages/123456 { "update_mask": "field_str,field_int", "message":{"field_str":"test"} }`
    //      | `UpdateMessage(message_id: "123456" "update_mask": "field_str,field_int", "message":{"field_str":"test"} )`
    //
    // Note that when using `*` in the body mapping, it is not possible to
    // have HTTP parameters, as all fields not bound by the path end in
    // the body. This makes this option more rarely used in practice when
    // defining REST APIs. The common usage of `*` is in custom methods
    // which don't use the URL at all for transferring data.
    rpc Update2Message(UpdateMessage2Request) returns (UpdateMessage2Response) {
        option (google.api.http) = {
           patch: "/v1/messages2/{message_id}"
           body: "*"
         };
    }

    // 6. The special name `*` can be used in the body mapping to define that
    // every field not bound by the path template should be mapped to the
    // request body.
    //
    // HTTP | gRPC
    // -----|-----
    // `POST /v1/messages {"progress":"STARTED", "metadata":{"k1":"v1","k2":"v2"}, ...}`
    // | `PostMessage({"progress":"STARTED", "metadata":{"k1":"v1","k2":"v2"}, ...})`
    rpc PostMessage(PostMessageRequest) returns (PostMessageResponse) {
        option (google.api.http) = {
            post: "/v1/messages"
            body: "*"
        };
    }
}

// *** 1. GetMessage() ***
message GetMessageRequest {
    string name = 1; // Mapped to URL path.
}

message GetMessageResponse {
    string text = 1; // The resource content.
}

// *** 2. GetMessage2() ***
message GetMessage2Request {
    string message_id = 1;                        // Mapped to URL path.
    int64 revision = 2;                           // Mapped to URL query parameter `revision`.
    SubMessage sub = 3;                           // Mapped to URL query parameter `sub.subfield`.
}

message SubMessage {
    string subfield = 1;
}

message GetMessage2Response {
    string message_id = 1; // Mapped to URL path.
    int64 revision = 2;    // Mapped to URL query parameter `revision`.
    SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`.
    AckMessage ack = 4;
}

message AckMessage {
    string task_id = 1; // random uuid from server
    AckStatus status = 2;

}

enum AckStatus {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
}

// *** 3. GetMessage3() ***
message GetMessage3Request {
    string message_id = 1;
    string user_id = 2;
}

message GetMessage3Response {
    string message_id = 1;
    string user_id = 2;
    AckMessage ack = 3;
}

// *** 4. UpdateMessage() ***
message UpdateMessageRequest {
    string message_id = 1;          // mapped to the URL
    Message message = 2;            // mapped to the body
}

message UpdateMessageResponse {
    string message_id = 1;          // mapped to the URL
    Message message = 2;            // mapped to the body
    AckMessage ack = 3;
}

message Message {
    google.protobuf.FieldMask update_mask = 1;
    string text = 2; // The resource content.
}

// *** 5. UpdateMessage2() ***
message UpdateMessage2Request {
    string message_id = 1;                         // mapped to the URL
    google.protobuf.FieldMask update_mask = 2;     // mapped to the body
    Message2 message = 3;                           // mapped to the body
}

message UpdateMessage2Response {
    string message_id = 1;
    google.protobuf.FieldMask update_mask = 2;
    Message2 message =  3;
    AckMessage ack = 4;
}

message Message2 {
    string field_str = 1;
    int32 field_int = 2;
    float field_float = 3;
    bool field_bool = 4;
}

// *** 6. PostMessage() ***
message PostMessageRequest {
    EnumProgress progress = 1;
    map<string, string> metadata = 2;
    repeated Message messages = 3;
    google.protobuf.Timestamp start_date = 4;
    google.protobuf.Duration duration = 5;
    google.protobuf.FieldMask update_mask = 6;
}

message PostMessageResponse {
    EnumProgress progress = 1;
    map<string, string> metadata = 2;
    repeated Message messages = 3;
    google.protobuf.Timestamp start_date = 4;
    google.protobuf.Duration duration = 5;
    google.protobuf.FieldMask update_mask = 6;
    AckMessage ack = 7;
}

enum EnumProgress {
    PROGRESS_UNKNOWN = 0;
    STARTED = 1;
    RUNNING = 2;
    ABORTED = 3;
    COMPLETED = 4;
}